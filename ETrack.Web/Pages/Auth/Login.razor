@page "/login"
@page "/login/new-account/{newlyRegisteredAccount}"

@layout AuthLayout
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject NavigationManager NavigationManager

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <div class="form-header">
        <span class="material-icons header-icon">face</span>
        <h3>Log In</h3>
    </div>
    @if (confirmStatus is not null)
    {
        <p class="@(confirmStatusSucceeded ? "success-message" : "error-message" )">
            @confirmStatus
        </p>
    }
    <DataAnnotationsValidator />
    <div class="form-group">
        <input id="email" class="input" type="email" @bind="user.Email" placeholder="" required>
        <label for="email" class="label">Email Address</label>
    </div>
    <div class="form-group">
        <input id="password" class="input password-input" type="@(showPassword ? "text" : "password")"
            @bind="user.Password" placeholder="" required>
        <label for="password" class="label">Password</label>
        <span class="toggle-password material-icons" @onclick="togglePass">
            @(showPassword ? "visibility" : "visibility_off")
        </span>
        <a class="forgot-password" href="/forgot-password">Forgot Password?</a>
    </div>
    @if (errorMessage is not null)
    {
        <div class="error-message">
            @errorMessage
            @if(unverifiedAccount) {
                <br>
                <button @onclick="VerifyEmail" class="btn">Send confirmation link</button>
                @if(verifyLoading)
                {
                    <style>
                        .lds-dual-ring {
                            margin-top: 1em;
                            margin-left: calc(50% - 40px);
                        }
                    </style>
                    <div class="lds-dual-ring"></div>
                }
                <p style="text-align: center; margin: 1em">@confirmationStatus</p>
            }
        </div>
    }
    <button type="submit" class="btn">Log In</button>
    <p class="no-account">Don't have an account? <a href="/signup">register</a></p>
    <ValidationSummary />
    <footer>Copyright Â© Group Haskell 2023.</footer>
</EditForm>

@code {

    [Parameter]
    public string? newlyRegisteredAccount { get; set; }

    bool showPassword = false;
    string? errorMessage = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (newlyRegisteredAccount is not null)
        {
            user.Email = newlyRegisteredAccount;
        }
    }

    string? confirmStatus = null;
    bool confirmStatusSucceeded = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (newlyRegisteredAccount is not null)
        {
            try
            {
                await UserService.UserConfirm(newlyRegisteredAccount);
                confirmationStatus = $"The confirmation link will be emailed to your account '{newlyRegisteredAccount}' shortly";
                confirmStatusSucceeded = true;
            }
            catch (Exception e)
            {
                confirmStatusSucceeded = false;
                confirmationStatus = e.Message;
            }
        }
    }

    UserLoginDto user = new UserLoginDto
        {
            Email = "",
            Password = ""
        };

    void togglePass()
    {
        showPassword = !showPassword;
    }

    bool unverifiedAccount = false;

    async Task HandleLogin()
    {
        try
        {
            var token = await UserService.UserLogin(user);
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            if (e.Message == "User must have a confirmed email") {
                unverifiedAccount = true;
            }
        }
    }

    bool verifyLoading = false;
    string confirmationStatus = "";
    async Task VerifyEmail() 
    {
        verifyLoading = true;
        try 
        {
            await UserService.UserConfirm(user.Email);
            confirmationStatus += $"Check your email for confirmation link";
        }
        catch (Exception e)
        {
            confirmationStatus += $"Error sending confirmation link: {e.Message}";
        }
        verifyLoading = false;
    }
}