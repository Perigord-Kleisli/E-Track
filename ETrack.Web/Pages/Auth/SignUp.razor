@page "/signup"
@page "/register"
@layout AuthLayout
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <div class="form-header">
        <span class="material-icons header-icon">face</span>
        <h3>Sign Up</h3>
    </div>
    <DataAnnotationsValidator />
    <div class="form-input-container">
        <div class="form-row">
            <div class="form-group">
                <input id="FirstName" class="input" type="name" @bind="user.FirstName" placeholder="" required>
                <label for="FirstName" class="label">First Name</label>
            </div>
            <div class="form-group">
                <input id="LastName" class="input" type="name" @bind="user.LastName" placeholder="" required>
                <label for="LastName" class="label">Last Name</label>
            </div>
        </div>
        <div class="form-group">
            <input id="fullname" class="input" type="name" @bind="user.FullName" placeholder="" required>
            <label for="fullname" class="label">Full Name</label>
        </div>
        <div class="form-group">
            <input id="register-token" class="input" @bind="user.RegisterToken" placeholder="" required>
            <label for="register-token" class="label">Register GUID</label>
        </div>

        <div class="form-group">
            <input id="birthdate" class="input" type="date" @bind="user.BirthDate" placeholder="" required>
            <label for="birthdate" class="label">Birth Date</label>
        </div>
        <div class="form-group">
            <input id="email" class="input" type="email" @bind="user.Email" placeholder="" required>
            <label for="email" class="label">Email Address</label>
        </div>
        <div class="form-group">
            <input id="password" class="input" type="@(showPassword ? "text" : "password")" @bind="user.Password"
                @bind:event="oninput" placeholder="" required>
            <label for="password" class="label">Password</label>
            <span class="toggle-password material-icons" @onclick="togglePass">@(showPassword ? "visibility" :
                "visibility_off")</span>
            <svg class="password-rating" viewBox="0 0 100 1" height="1em" width="100%">
                <g fill="none" stroke="@passwordRatingColor" stroke-width="2">
                    <path stroke-linecap="butt" stroke-dasharray="21,3" d="M 2 2 l @((passwordRating * 92)) 0" />
                </g>
            </svg>
            <ul class="password-ratelist">
                @if (containsEight)
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain atleast 8 characters
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain atleast 8 characters
                    </li>
                }
                @if (containsUpper)
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain an uppercase letter
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain an uppercase letter
                    </li>
                }
                @if (containsDigit)
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain a digit
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain a digit
                    </li>
                }
                @if (containsSpecial)
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain a special character
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain a special character
                    </li>
                }
            </ul>
        </div>

        <div class="form-group">
            <input id="passwordconfirm" class="input" type="@(showPassword ? "text" : "password")"
                @bind="passwordConfirm" @bind:event="oninput" placeholder="" required />
            <label for="passwordconfirm" class="label">
                Confirm Password
            </label>
            <span class="toggle-password material-icons" @onclick="togglePass">@(showPassword ? "visibility" :
                "visibility_off")
            </span>
            @if (user.Password != passwordConfirm)
            {
                <p style="color: red; margin: 0.5em">Passwords do not match</p>
                JS.InvokeVoidAsync("validatePasswords");
            }
        </div>
    </div>
    @if (errorMessage is not null)
    {
        <div class="error-message">@errorMessage</div>
    }
    <button type="submit" class="login-btn">Sign Up</button>
    <p class="has-account">Already have an account? <a href="/login">login</a></p>
    <ValidationSummary />
    <footer>Copyright Â© Group Haskell 2023.</footer>
</EditForm>

@code {
    bool containsEight = false;
    bool containsUpper = false;
    bool containsDigit = false;
    bool containsSpecial = false;
    public string passwordConfirm = "";

    float passwordRating => ratePassword(user.Password);
    string passwordRatingColor =>
    "#" +
    (((int)(256 - passwordRating * 255)).ToString("X2")) +
    (((int)(passwordRating * 255)).ToString("X2")) +
    "50";

    float ratePassword(string pass)
    {
        float passRating = Math.Min(0.25f, (pass.Length / 8f) / 4f);
        if (pass.Length / 8f >= 1f)
        {
            containsEight = true;
        }
        else
        {
            containsEight = false;
        }
        if (pass.Any(x => char.IsUpper(x)))
        {
            passRating += 0.25f;
            containsUpper = true;
        }
        else
        {
            containsUpper = false;
        }
        if (pass.Any(x => char.IsDigit(x)))
        {
            passRating += 0.25f;
            containsDigit = true;
        }
        else
        {
            containsDigit = false;
        }
        if (pass.Any(x => !(char.IsLetter(x) || char.IsDigit(x))))
        {
            passRating += 0.25f;
            containsSpecial = true;
        }
        else
        {
            containsSpecial = false;
        }
        return passRating;
    }

    bool showPassword = false;
    string? errorMessage = null;
    UserRegisterDto user = new UserRegisterDto
        {
            Email = "",
            Password = "",
            FullName = "",
            BirthDate = DateTime.Now,
            RegisterToken = "",
        };

    void togglePass()
    {
        showPassword = !showPassword;
    }

    async Task HandleLogin()
    {

        try
        {
            await UserService.UserRegister(new UserRegisterDto
                {
                    Email = user.Email,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    FullName = user.FullName,
                    BirthDate = user.BirthDate,
                    Password = user.Password,
                    RegisterToken = user.RegisterToken
                });
            NavigationManager.NavigateTo($"/login/new-account/{user.Email}");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}