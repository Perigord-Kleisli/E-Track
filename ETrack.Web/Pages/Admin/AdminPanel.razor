@page "/admin-panel"
@inject HttpClient Http

<style>
    .generated-guid {
        font-size: large;
        font-weight: bold;
        margin: 1em;
        padding: 0.25em;
        border: 2px solid var(--primary-color);
    }
    .gen-guid-container {
        display: flex;
    }

    .dropdown {
        margin: 0.5em;
    }
</style>

<AuthorizeView Roles="Admin" Context="Authcontext">
    <Authorized>
        <EditForm Model=@GenGUIDModel OnValidSubmit=@showGUID>
            <div class="gen-guid-container">
                <button class="btn btn-primary" type="submit">Generate Register GUID</button>
                <div class="generated-guid" >
                    <p>@generatedGUID</p>
                </div>
            </div>
            <p>Parent</p>
            <input @bind=GenGUIDModel.isParent  type="checkbox" name="parentCheckbox">
            <p>Teacher</p>
            <input @bind=GenGUIDModel.isTeacher type="checkbox" name="teacherCheckbox">
            <p>Admin</p>
            <input @bind=GenGUIDModel.isAdmin type="checkbox" name="adminCheckbox">
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>User is not authorized to view this</p>
    </NotAuthorized>
</AuthorizeView>

@code 
{

    protected GenGUID GenGUIDModel {get; set;} = new GenGUID();
    protected class GenGUID
    {
        public bool isParent;
        public bool isTeacher;
        public bool isAdmin;
    }
    List<UserDto> users = new List<UserDto>{};
    string generatedGUID = "";

    bool showTable = false;

    void toggleTable() 
    {
        showTable = !showTable;
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        var response = await Http.GetAsync("api/auth/users");
        if (response.IsSuccessStatusCode)
        {
            users = (await response.Content.ReadFromJsonAsync<List<UserDto>>())!;
        }
    }
    async void showGUID()
    {
        if (!(GenGUIDModel.isParent || GenGUIDModel.isTeacher || GenGUIDModel.isAdmin)) {
            return;
        }
        var response = await Http.PostAsJsonAsync("/api/auth/generate-register-token", new CreateTokenDto {
            isParent = GenGUIDModel.isParent,
            isTeacher = GenGUIDModel.isTeacher,
            isAdmin = GenGUIDModel.isAdmin 
        });
        if (response.IsSuccessStatusCode)
        {
            generatedGUID = await response.Content.ReadAsStringAsync();
        }
    }
}