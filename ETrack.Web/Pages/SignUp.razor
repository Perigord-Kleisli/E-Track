@page "/signup"
@page "/register"
@layout NoMenuLayout
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS



<style>
    body {
        background-color: var(--primary-color);
    }
    form {
        --text-color: #afafaf;
        max-width: 75%;
        min-width: 70ch;
        border: 1px solid var(--text-color);
        border-radius: 1em;
        padding: 3em;
        position: absolute;
        top: 50%;
        left: 50%;
        background: white;
        transform: translate(-50%,-50%);        
    }

    .form-group {
        width: 100%;
        position: relative;
        margin: 4rem auto 1rem;
        display: grid;
        margin-top: 2em;
    }

    .label {
        color: var(--text-color);
        font-size: 1.2rem;
    }

    .input {
        overflow: hidden;
        outline: none;
        margin: 0;
        width: 100%;
        font-size: large;
        padding: 1rem 1rem;
        border: 1px solid var(--text-color);
        border-radius: 0.5rem;
    }

    .input:hover {
        border-color: black;
    }

    .input:focus-within {
        border: 2px solid #0b5ed7
    }

    .input:invalid:not(:placeholder-shown) + .label {
        color: red;
    }

    .label {
        z-index: 1;
        position: absolute;
        grid-column: 1;
        grid-row: 1;
        transform: translateY(1.2rem) translateX(1em);
        transform-origin: 0%;
        border: white solid 0px;
        transition: transform 400ms;
        background-color: white;
    }

    .form-header {
        text-align: center;
        margin-bottom: 3em;
    }

    .header-icon {
        font-size: 3em;
        margin: 0.5em;
        background-color: var(--primary-color);
        border: 10px solid var(--primary-color);
        color: white;
        border-radius: 100%;
    }

    .form-group:focus-within .label, 
    .input:not(:placeholder-shown) + .label{
        transform: scale(0.8) translateY(calc(-1rem - 6px)) translateX(1em);
        border: white solid 6px;
    }

    .login-btn {
        width: 100%;
        margin-top: 1em;
        border-radius: 0.5rem;
        padding: 0.5em;
        color: white;
        border: 0px;
        background-color: var(--secondary-color);
    }    

    .login-btn:active {
        background-color: var(--secondary-color-light);
    }

    .login-btn:hover {
        background-color: var(--secondary-color-dark);
    }

    footer {
        text-align: center;
        color: gray;
        width: 100%;
        margin-top: 2em;
    }

    .toggle-password {
        cursor: pointer;
        position: absolute;
        font-size: 1.2em;
        grid-column: 1;
        grid-row: 1;
        right: 0.5em;
        top: 0.5em;
        border: 10px solid transparent;
        user-select: none;
        transition: border 100ms, background-color 100ms;
        border-radius: 100%;
        display: none;
    }

    .input:not(:placeholder-shown) ~ .toggle-password {
        display: block;
    }

    .input:not(:placeholder-shown) ~ .password-rating {
        transform: scaleY(1);
    }

    .password-ratelist {
        margin-top: 0;
        list-style: none;
        height: 0;
        margin: 0;
        transform: translateY(1em) scaleY(0);
        transform-origin: 0%;
        transition: transform 500ms, height 300ms;
    }

    .ratelist-item-correct {
        color: green;
    }
    .ratelist-item-incorrect {
        color: red;
    }

    .input:not(:placeholder-shown) ~ .password-ratelist {
        transform: translateY(0) scaleY(1);
        margin-top: 0.5em;
        height: auto;
    }

    .toggle-password:hover {
        background-color: lightgray;
        border: 10px solid lightgray;
    }

    .toggle-password:active {
        background-color: gray;
        border: 10px solid gray;
    }

    .error-message {
        border: 2px solid red;
        color: red;
        padding: 0.5em;
        background-color: pink;
    }

    .form-input-container {
        display: flex;
        flex-direction: column;
    }

    .form-row {
        display: flex;
        gap: 2em;
    }

</style>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <div class="form-header">
    <span class="material-icons header-icon">face</span>
    <h3>Sign Up</h3>
    </div>
    <DataAnnotationsValidator />
    <div class="form-input-container">
        <div class="form-row">
            <div class="form-group">
                <input id="FirstName" class="input" type="name" @bind="user.FirstName" placeholder="" required>
                <label for="FirstName" class="label">First Name</label>
            </div>
            <div class="form-group">
                <input id="LastName" class="input" type="name" @bind="user.LastName" placeholder=""required>
                <label for="LastName" class="label">Last Name</label>
            </div>
        </div>
        <div class="form-group">
            <input id="fullname" class="input" type="name" @bind="user.FullName" placeholder="" required>
            <label for="fullname" class="label">Full Name</label>
        </div>
        <div class="form-group">
            <input id="birthdate" class="input" type="date" @bind="user.BirthDate" placeholder="" required>
            <label for="birthdate" class="label">Birth Date</label>
        </div>
        <div class="form-group">
            <input id="email" class="input" type="email" @bind="user.Email" placeholder="" required>
            <label for="email" class="label">Email Address</label>
        </div>
        <div class="form-group">
            <input 
                id="password" 
                class="input" 
                type="@(showPassword ? "text" : "password")" 
                @bind="user.Password" 
                @bind:event="oninput"
                placeholder="" 
                required>
            <label for="password" class="label">Password</label>
            <span 
                class="toggle-password material-icons" 
                @onclick="togglePass"
                >@(showPassword ? "visibility" : "visibility_off")</span>
            <svg class="password-rating" viewBox="0 0 100 1" height="1em" width="100%">
                <g fill="none" stroke="@passwordRatingColor" stroke-width="2">
                    <path 
                        stroke-linecap="butt" 
                        stroke-dasharray="21,3" 
                        d="M 2 2 l @((passwordRating * 92)) 0" />
                </g>
            </svg>
            <ul class="password-ratelist">
                @if(containsEight) 
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain atleast 8 characters
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain atleast 8 characters
                    </li>
                }
                @if(containsUpper) 
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain an uppercase letter
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain an uppercase letter
                    </li>
                }
                @if(containsDigit) 
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain a digit
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain a digit
                    </li>
                }
                @if(containsSpecial) 
                {
                    <li class="ratelist-item-correct">
                        <span class="material-icons">done</span>
                        Should contain a special character
                    </li>
                }
                else
                {
                    <li class="ratelist-item-incorrect">
                        <span class="material-icons">close</span>
                        Should contain a special character
                    </li>
                }
            </ul>
        </div>

        <div class="form-group">
            <input 
                id="passwordconfirm" 
                class="input" 
                type="@(showPassword ? "text" : "password")" 
                @bind="passwordConfirm" 
                @bind:event="oninput"
                placeholder="" 
                required />
            <label for="passwordconfirm" class="label">
                Confirm Password
            </label>
            <span 
                class="toggle-password material-icons" 
                @onclick="togglePass"
                >@(showPassword ? "visibility" : "visibility_off")
            </span>
            @if(user.Password != passwordConfirm) 
            {
                <p style="color: red; margin: 0.5em">Passwords do not match</p>
                JS.InvokeVoidAsync("validatePasswords");
            }
        </div>
    </div>
    @if(errorMessage is not null) {
        <div class="error-message">@errorMessage</div>
    }
    <button type="submit" class="login-btn">Sign Up</button>
    <ValidationSummary />
    <footer>Copyright Â© Group Haskell 2023.</footer>
</EditForm>

@code {

    bool containsEight = false;
    bool containsUpper = false;
    bool containsDigit = false;
    bool containsSpecial = false;

    public string passwordConfirm = "";

    float passwordRating => ratePassword(user.Password);
    string passwordRatingColor => 
        "#" +
        (((int)(256 - passwordRating * 255)).ToString("X2")) + 
        (((int)(passwordRating * 255)).ToString("X2")) + 
        "50";

    float ratePassword(string pass) {
        float passRating = Math.Min(0.25f, (pass.Length / 8f) / 4f);
        if (pass.Length / 8f >= 1f)
        {
            containsEight = true;
        }
        else 
        {
            containsEight = false;
        }
        if (pass.Any(x => char.IsUpper(x))) 
        {
            passRating += 0.25f;
            containsUpper = true;
        }
        else 
        {
            containsUpper = false;
        }
        if (pass.Any(x => char.IsDigit(x))) 
        {
            passRating += 0.25f;
            containsDigit = true;
        }
        else
        {
            containsDigit = false;
        }
        if (pass.Any(x => !(char.IsLetter(x) || char.IsDigit(x)) )) 
        {
            passRating += 0.25f;
            containsSpecial = true;
        }
        else 
        {
            containsSpecial = false;
        }
        return passRating;
    }

    bool showPassword = false;
    string? errorMessage = null;
    UserRegisterDto user = new UserRegisterDto
        {
            Email = "",
            Password = "",
            FullName = "",
            BirthDate = DateTime.MinValue
        };

    void togglePass() {
        showPassword = !showPassword;
    }

    async Task HandleLogin()
    {
        try {
            await UserService.UserRegister(user);
            NavigationManager.NavigateTo("/login");
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }
}